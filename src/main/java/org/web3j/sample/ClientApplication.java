package org.web3j.sample;

public class ClientApplication {

//    private static final Logger log = LoggerFactory.getLogger(ClientApplication.class);
//    private static String eventGeneratorAddress  = "0xdbd41f2137ec80441d65c2e5a80a344f994aac52";
//    
//    public static void main(String[] args) throws Exception {
//        new ClientApplication().run();
//    }
//
//    private void run() throws Exception {
//
//        // We start by creating a new web3j instance to connect to remote nodes on the network.
//        // Note: if using web3j Android, use Web3jFactory.build(...
//        Web3j web3j = Web3jManager.getWeb3jInstance(Blockchain.ETHEREUM_1).getWeb3j(); 
//        log.info("Connected to Ethereum client version: "
//                + web3j.web3ClientVersion().send().getWeb3ClientVersion());
//
//        // We provide a private key to create credentials
//        Credentials credentials = Web3jManager.getWeb3jInstance(Blockchain.ETHEREUM_1).getCredentials();
//        log.info("Credentials loaded");
//        
//        // Let's connect to a previously deployed contract
//        log.info("Connecting to previously deployed smart contract");
//        EventGenerator eventContract = EventGenerator.load(eventGeneratorAddress,
//                web3j, credentials, 
//                ManagedTransaction.GAS_PRICE, Contract.GAS_LIMIT);
//        
//        String contractAddress = eventContract.getContractAddress();
//        log.info("Smart contract loaded from address " + contractAddress);
//
//        // fire a "Hello World" test message
////        log.info("Firing a Test Message");
////        TransactionReceipt transactionReceipt = contract.fireTestMessage().send();
////
////        // Check the events generated by the fireTestMessage method
////        for (EventGenerator.LogEventResponse event : contract.getLogEvents(transactionReceipt)) {
////        	log.info("Log Event [" + event.blockNumber+ "]: " + event.message);
////        }
//        
//        // Lets deploy a new smart contract: T1
//	    log.info("Deploying smart contract");
//	    T1 t1Contract = T1.deploy(
//	              web3j, credentials,
//	              ManagedTransaction.GAS_PRICE, Contract.GAS_LIMIT, contractAddress).send();
//
//        // Calling the start method on T1 which sends out 2 events
//	    // 1. LogEvent with a message to indicate we're starting
//	    // 2. Send out a callback request for current block time + 2
//	    log.info("Sending a callback request");
//	    t1Contract.start().send();
//        
//        log.info("Application complete");
//    }
}
