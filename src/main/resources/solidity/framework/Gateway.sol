pragma solidity ^0.4.24;

contract Gateway {

  // The Events generated by the framework (outward)

  // Simple Log Messages
  event Log(string message, uint blockNumber);

  // A request to register a callback at a certain time
  event CallbackRequest(address contractAddress, string methodName, uint timeRequested);

  // A request to cancel a previously registered contract
  event CallbackCancel(address contractAddress, string methodName, uint timeRequested);

  // A crosschain call - calls another address on a specific method
  event CrossChain(string blockchainSystem, address contractAddress, string methodName);


  // Emitting of Events Section
  function fireTestMessage() public {
  	emit Log("Hello World", block.number);
  }

  function fireMessage(string _message) public {
  	emit Log(_message, block.number);
  }

  function requestCallback(address _contractAddress, string _methodName, uint _timeRequested) public {
  	emit CallbackRequest(_contractAddress, _methodName, _timeRequested);
  	emit Log("Request Callback", block.number);
  }

  function cancelCallback(address _contractAddress, string _methodName, uint _timeRequested) public {
  	emit CallbackCancel(_contractAddress, _methodName, _timeRequested);
  }

  function initiateCCC(string _bcSystem, address _contractAddress, string _methodName) public {
  	emit CrossChain(_bcSystem, _contractAddress, _methodName);
  }

  // Call Functions 
  function call(address contractAddress, string method) public {
    contractAddress.call(bytes4(keccak256(method)));
  }
}